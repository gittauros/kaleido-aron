<?xml version="1.0" encoding="UTF-8"?>
<!-- Logback Configuration.  -->
<configuration debug="false" scan="true" scanPeriod="60 seconds">
    <springProperty scope="context" name="log.mode" source="log.mode"/>
    <springProperty scope="context" name="log.dir" source="log.dir"/>
    <springProperty scope="context" name="log.level" source="log.level"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <target>System.out</target>
        <encoder charset="UTF-8"> <!-- encoder 可以指定字符集，对于中文输出有意义 -->
            <pattern>%d [%thread] %-5p [%c] [%F:%L] - %msg [%X{logSuffix}] %n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d [%thread] %-5p [%c] [%F:%L] - %msg [%X{logSuffix}] %n</pattern>
        </layout>
    </appender>

    <appender name="infoRollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>${log.level}</level>
        </filter>
        <file>${log.dir}/aron.log</file>
        <!-- 可让每天产生一个日志文件，最多 30 个，自动回滚 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.dir}/meeting-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder charset="UTF-8"> <!-- encoder 可以指定字符集，对于中文输出有意义 -->
            <pattern>%d [%thread] %-5p [%logger] [%F:%L] - %msg [%X{logSuffix}] %n</pattern>
        </encoder>
    </appender>

    <appender name="INFO_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>2048</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="infoRollingFile"/>
        <includeCallerData>true</includeCallerData>
    </appender>

    <appender name="sqlRollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <file>${log.dir}/sql.log</file>
        <!-- 可让每天产生一个日志文件，最多 30 个，自动回滚 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.dir}/sql-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder charset="UTF-8"> <!-- encoder 可以指定字符集，对于中文输出有意义 -->
            <pattern>%d [%thread] %-5p [%c] [%F:%L] - %msg [%X{logSuffix}] %n</pattern>
        </encoder>
    </appender>

    <appender name="SQL_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>2048</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="sqlRollingFile"/>
        <includeCallerData>true</includeCallerData>
    </appender>

    <appender name="errorRollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${log.dir}/error.log</file>
        <!-- 可让每天产生一个日志文件，最多 30 个，自动回滚 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.dir}/error-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder charset="UTF-8"> <!-- encoder 可以指定字符集，对于中文输出有意义 -->
            <pattern>%d [%thread] %-5p [%c] [%F:%L] - %msg [%X{errorLogSuffix}] %n</pattern>
        </encoder>
    </appender>

    <appender name="ERROR_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>2048</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="errorRollingFile"/>
        <includeCallerData>true</includeCallerData>
    </appender>

    <appender name="warnRollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${log.dir}/warn.log</file>
        <!-- 可让每天产生一个日志文件，最多 30 个，自动回滚 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.dir}/warn-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder charset="UTF-8"> <!-- encoder 可以指定字符集，对于中文输出有意义 -->
            <pattern>%d [%thread] %-5p [%c] [%F:%L] - %msg [%X{errorLogSuffix}] %n</pattern>
        </encoder>
    </appender>

    <appender name="WARN_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>2048</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="warnRollingFile"/>
        <includeCallerData>true</includeCallerData>
    </appender>

    <logger name="org.apache">
        <level value="INFO"/>
    </logger>

    <logger name="org.springframework">
        <level value="INFO"/>
    </logger>

    <logger name="springfox.documentation">
        <level value="INFO"/>
    </logger>

    <logger name="org.mybatis.spring.SqlSessionUtils">
        <level value="INFO"/>
    </logger>

    <logger name="com.tauros.kaleido.aron.dao">
        <level value="DEBUG"/>
        <appender-ref ref="SQL_ASYNC"/>
    </logger>

    <root>
        <level value="${log.level}"/>
        <appender-ref ref="INFO_ASYNC"/>
        <appender-ref ref="ERROR_ASYNC"/>
        <appender-ref ref="WARN_ASYNC" />
        <appender-ref ref="STDOUT"/>
    </root>
</configuration>
